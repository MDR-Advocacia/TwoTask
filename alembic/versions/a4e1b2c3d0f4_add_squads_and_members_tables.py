"""add squads and members tables

Revision ID: a4e1b2c3d0f4
Revises: c5a3a4b1e0d2
Create Date: 2025-09-24 09:42:00.543210

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a4e1b2c3d0f4'
down_revision: Union[str, None] = 'c5a3a4b1e0d2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('squads',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('external_id', sa.Uuid(), nullable=False, comment='ID original do squad no JSON'),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('sector', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('last_assigned_member_id', sa.Integer(), nullable=True),
    # Adicionado post_update=True no modelo, então a constraint é criada separadamente
    # sa.ForeignKeyConstraint(['last_assigned_member_id'], ['squad_members.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_squads_external_id'), 'squads', ['external_id'], unique=True)
    op.create_index(op.f('ix_squads_id'), 'squads', ['id'], unique=False)
    op.create_index(op.f('ix_squads_sector'), 'squads', ['sector'], unique=True)
    
    op.create_table('squad_members',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('external_id', sa.Uuid(), nullable=False, comment='ID original do membro no JSON'),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=True, comment="Ex: 'advogado', 'assistente'"),
    sa.Column('is_leader', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('squad_id', sa.Integer(), nullable=False),
    sa.Column('legal_one_user_id', sa.Integer(), nullable=True, comment='Link para o ID do usuário correspondente na tabela legal_one_users'),
    sa.ForeignKeyConstraint(['legal_one_user_id'], ['legal_one_users.id'], ),
    sa.ForeignKeyConstraint(['squad_id'], ['squads.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_squad_members_external_id'), 'squad_members', ['external_id'], unique=True)
    op.create_index(op.f('ix_squad_members_id'), 'squad_members', ['id'], unique=False)
    op.create_index(op.f('ix_squad_members_legal_one_user_id'), 'squad_members', ['legal_one_user_id'], unique=False)

    # Adiciona a foreign key de squads para squad_members manualmente
    # por causa da referência circular (post_update)
    with op.batch_alter_table('squads') as batch_op:
        batch_op.create_foreign_key(
            "fk_squads_last_assigned_member_id_squad_members",
            "squad_members",
            ["last_assigned_member_id"],
            ["id"],
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('squads') as batch_op:
        batch_op.drop_constraint("fk_squads_last_assigned_member_id_squad_members", type_='foreignkey')

    op.drop_index(op.f('ix_squad_members_legal_one_user_id'), table_name='squad_members')
    op.drop_index(op.f('ix_squad_members_id'), table_name='squad_members')
    op.drop_index(op.f('ix_squad_members_external_id'), table_name='squad_members')
    op.drop_table('squad_members')

    op.drop_index(op.f('ix_squads_sector'), table_name='squads')
    op.drop_index(op.f('ix_squads_id'), table_name='squads')
    op.drop_index(op.f('ix_squads_external_id'), table_name='squads')
    op.drop_table('squads')
    # ### end Alembic commands ###